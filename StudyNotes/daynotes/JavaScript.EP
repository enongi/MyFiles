JavaScript学习

JavaScript简介
直接写入HTML输出流：document.write("<p>这是一个段落。</p>")；
对事件做出反应：<button type="button" onclick="alert('欢迎点击！')">点我</button>
改变HTML内容：
	x=doucument.getElementById("demo");//找到元素
	x.innerHTML="Hello JavaScript!";   //改变内容
改变HTML图片：
	  element=document.getElementById('myimage')
	  if (element.src.match("bulbon"))
	  {
		element.src="/statics/images/course/pic_bulboff.gif";
	  }
	  else
	  {
		element.src="/statics/images/course/pic_bulbon.gif";
	  }
改变HTML样式：
	x=document.getElementById("demo") // 找到元素
	x.style.color="#ff0000";          // 改变样式
验证输入：
	var x=document.getElementById("demo").value;
	if(x==""||isNaN(x))
	{
		alert("不是数字");
	}

JavaScript用法：
HTML中的脚本必须位于<script></script>之间
脚本可以放在HTML页面的<head>和<body>部分中
JavaScript函数和事件
通常，我们需要在某个事件发生时执行代码，比如当用户点击按钮时。
如果我们把 JavaScript 代码放入函数中，就可以在事件发生时调用该函数。

在 <head> 或者 <body> 的JavaScript 
您可以在 HTML 文档中放入不限数量的脚本。
脚本可位于 HTML 的 <body> 或 <head> 部分中，或者同时存在于两个部分中。
通常的做法是把函数放入 <head> 部分中，或者放在页面底部。
这样就可以把它们安置到同一处位置，不会干扰页面的内容。

外部的JavaScript
如需使用外部文件，请在 <script> 标签的 "src" 属性中设置该 .js 文件
<script src="myscript.js"></script>

JavaScript输出
JavaScript没有任何打印或输出的函数
JavaScript可以通过不同的方式来输出数据
	--使用window.alert()弹出警告框
	--使用document.write()方法将内容写到HTML文档中
	--使用innerHTML写入到HTML元素
	--使用console.log()写入到浏览器控制台

JavaScript语法
JavaScript字面量：
数字(Number)字面量，可以是整数或者是小数，也可以是科学计数法(e)
字符串(String)字面量，可以使用单引号或者双引号
表达式(Expression)字面量，用于计算
数组(Array)字面量，定义一个数组
对象(Object)字面量，定义一个对象
函数(Function)字面量，定义一个函数

JavaScript变量
JavaScript使用var关键字定义变量，使用等号来为变量赋值
变量是一个名称(可变)，字面量是一个值(恒定)

JavaScript操作符
赋值，算术和位运算符：= + - * /
条件，比较及逻辑运算符 == != < >

JavaScript语句
在 HTML 中，JavaScript 语句向浏览器发出的命令。浏览器通过 JavaScript 语句明白要执行什么操作。
语句是用分号分隔

JavaScript 关键词
JavaScript 语句通常以关键词为开头。 var 关键词告诉浏览器创建一个新的变量

JavaScript 标识符
和其他任何编程语言一样，JavaScript 保留了一些标识符为自己所用。
JavaScript 同样保留了一些关键字，这些关键字在当前的语言版本中并没有使用，但在以后 JavaScript 扩展中会用到。
JavaScript 标识符必须以字母、下划线（_）或美元符（$）开始。
后续的字符可以是字母、数字、下划线或美元符（数字是不允许作为首字符出现的，以便 JavaScript 可以轻易区分开标识符和数字）。
以下是 JavaScript 中最​​重要的保留字（按字母顺序）：
abstract else instanceof super
boolean enum int switch
break export interface synchronized
byte extends let this
case false long throw
catch final native throws
char finally new transient
class float null true
const for package try
continue function private typeof
debugger goto protected var
default if public void
delete implements return volatile
do import short while
double in static with

JavaScript 函数
JavaScript 语句可以写在函数内，函数可以重复引用：
引用一个函数 = 调用函数(执行函数内的语句)。

JavaScript 对大小写敏感。
JavaScript 对大小写是敏感的。
当编写 JavaScript 语句时，请留意是否关闭大小写切换键。
函数 getElementById 与 getElementbyID 是不同的。
同样，变量 myVariable 与 MyVariable 也是不同的。

JavaScript 字符集
JavaScript 使用 Unicode 字符集。
Unicode 覆盖了所有的字符，包含标点等字符。

JavaScript 代码块
JavaScript 可以分批地组合起来。
代码块以左花括号开始，以右花括号结束。
代码块的作用是一并地执行语句序列。

JavaScript 语句标识符
JavaScript 语句通常以一个 语句标识符 为开始，并执行该语句。
语句标识符是保留关键字不能作为变量名使用。
break：用于跳出循环。
catch：语句块，在 try 语句块执行出错时执行 catch 语句块。
continue：跳过循环中的一个迭代。
do ... while：执行一个语句块，在条件语句为 true 时继续执行该语句块。
for：在条件语句为 true 时，可以将代码块执行指定的次数。
for ... in：用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。
function：定义一个函数
if ... else：用于基于不同的条件来执行不同的动作。
return：退出函数
switch：用于基于不同的条件来执行不同的动作。
throw：抛出（生成）错误 。
try：实现错误处理，与 catch 一同使用。
var：声明一个变量。
while：当条件语句为 true 时，执行语句块。

空格
JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。

对代码行进行折行
您可以在文本字符串中使用反斜杠对代码行进行换行      
	document.write("你好 \ W3Cschool!");
	document.write("<br />");

JavaScript 注释
JavaScript 不会执行注释,用于阻止代码执行。
我们可以添加注释来对 JavaScript 进行解释，或者提高代码的可读性。
单行注释以 // 开头。
多行注释以 /* 开始，以 */ 结尾。

声明（创建） JavaScript 变量
在 JavaScript 中创建变量通常称为"声明"变量。
变量声明之后，该变量是空的（它没有值）。
一条语句，多个变量
您可以在一条语句中声明很多变量，声明也可横跨多行
重新声明 JavaScript 变量
如果重新声明 JavaScript 变量，该变量的值不会丢失
在以下两条语句执行后，变量 carname 的值依然是 "Volvo"：    
	var carname="Volvo";        
	var carname;

JavaScript 数据类型 
字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）。
JavaScript 拥有动态类型
JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：
	var x;               // x 为 undefined
	var x = 5;           // 现在 x 为数字
	var x = "John";      // 现在 x 为字符串

JavaScript 布尔
布尔（逻辑）只能有两个值：true 或 false

JavaScript 数组
下面的代码创建名为 cars 的数组： 
	 var cars=new Array();
	 cars[0]="Saab";
	 cars[1]="Volvo";
	 cars[2]="BMW";
或者 (condensed array):
	var cars=new Array("Saab","Volvo","BMW");
或者 (literal array):
	var cars=["Saab","Volvo","BMW"]; 

JavaScript 对象
对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。
属性由逗号分隔：
	var person={firstname:"John", lastname:"Doe", id:5566};
上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。
空格和折行无关紧要。声明可横跨多行：
	 var person={
	 firstname : "John",
	 lastname  : "Doe",
	 id        :  5566
	 };
对象属性有两种寻址方式： 
	name=person.lastname;
	name=person["lastname"]; 

Undefined 和 Null
Undefined 这个值表示变量不含有值。
可以通过将变量的值设置为 null 来清空变量。
	cars=null;
	person=null;

声明变量类型
当您声明新变量时，可以使用关键词 "new" 来声明其类型： 
	 var carname=new String;
	 var x=      new Number;
	 var y=      new Boolean;
	 var cars=   new Array;
	 var person= new Object;
JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。
提示：JavaScript具有隐含的全局概念，意味着你不声明的任何变量都会成为一个全局对象属性。

JavaScript 函数 
在JavaScript中，函数即对象，可以随意地被程序操控，函数可以嵌套在其他函数中定义，这样可以访问它们被定义时所处的作用域中的任何变量。

函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。

JavaScript 函数语法
函数就是包裹在花括号中的代码块，前面使用了关键词 function：
 function functionname()
 {
	执行代码
 }
当调用该函数时，会执行函数内的代码。
可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。
JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。
提示：function 中的花括号是必需的，即使函数体内只包含一条语句，仍然必须使用花括号将其括起来。

调用带参数的函数
在调用函数时，您可以向其传递值，这些值被称为参数。
这些参数可以在函数中使用。
您可以发送任意多的参数，由逗号 (,) 分隔：
 myFunction(argument1,argument2)
当您声明函数时，请把参数作为变量来声明： 
 function myFunction(var1,var2)
{
	代码
 }
变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。
在您仅仅希望退出函数时 ，也可使用 return 语句。返回值是可选的

局部 JavaScript 变量
在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。
您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。
只要函数运行完毕，本地变量就会被删除。
局部变量比同名全局变量的优先级高，所以局部变量会隐藏同名的全局变量。

全局 JavaScript 变量
在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。

JavaScript 变量的生存期
JavaScript 变量的生命期从它们被声明的时间开始。
局部变量会在函数运行以后被删除。
全局变量会在页面关闭后被删除。

向未声明的 JavaScript 变量分配值
如果您把值赋给尚未声明的变量，该变量将被自动作为全局变量声明，即使它在函数内执行。

JavaScript 作用域 
作用域是可访问变量的集合。
在JavaScript中，能够定义全局作用域或者局部作用域。 

JavaScript 作用域
在 JavaScript 中, 对象和函数同样也是变量。
在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。 
JavaScript 函数作用域: 作用域在函数内修改。

JavaScript 局部作用域
变量在函数内声明，变量为局部作用域。
局部变量：只能在函数内部访问。
实例： 
	// 此处不能调用 carName 变量 
	function myFunction() { 
	    var carName = "Volvo"; 
	    // 函数内可调用 carName 变量 
	}
因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。
局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。

JavaScript 全局变量
变量在函数外定义，即为全局变量。
全局变量有 全局作用域: 网页中所有脚本和函数均可使用。 
实例： 
	var carName = " Volvo"; 
	// 此处可调用 carName 变量 
	function myFunction() { 
	    // 函数内可调用 carName 变量 
	}

如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。
以下实例中 carName 在函数内，但是为全局变量。
实例 ：
	// 此处可调用 carName 变量 
	function myFunction() { 
	    carName = "Volvo"; 
	    // 此处可调用 carName 变量 
	}
JavaScript 变量生命周期
JavaScript 变量生命周期在它声明时初始化。
局部变量在函数执行完毕后销毁。
全局变量在页面关闭后销毁。

函数参数
函数参数只在函数内起作用，是局部变量。

HTML 中的全局变量
在 HTML 中, 全局变量是 window 对象: 所有数据变量都属于 window 对象。
实例 ：
	//此处可使用 window.carName 
	function myFunction() { 
	    carName = "Volvo"; 
	}
 
你的全局变量，或者函数，可以覆盖 window 对象的变量或者函数。 
局部变量，包括 window 对象可以覆盖全局变量和函数。
 
在 ES6 中，提供了 let 关键字和 const 关键字。
let 的声明方式与 var 相同，用 let 来代替 var 来声明变量，就可以把变量限制在当前代码块中。
使用 const 声明的是常量，其值一旦被设定便不可被更改。




